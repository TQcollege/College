<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>